name: DevOps Project Laravel - Nomadd Application

permissions:
  security-events: write
  pull-requests: read
  contents: write
  id-token: write
  statuses: write
  actions: read
  pages: write

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    # needs: build
    steps:
    - uses: shivammathur/setup-php@15c43e89cdef867065b0213be354c2841860869e
      with:
        php-version: '7.4'
    - uses: actions/checkout@v3
    - name: Copy .env
      run: php -r "file_exists('.env') || copy('.env.example', '.env');"
    - name: Install Dependencies
      run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
    - name: Generate key
      run: php artisan key:generate
    - name: Directory Permissions
      run: chmod -R 777 storage bootstrap/cache
    - name: Create Database
      run: |
        mkdir -p database
        touch database/database.sqlite
    - name: Execute tests (Unit and Feature tests) via PHPUnit
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: database/database.sqlite
      run: vendor/bin/phpunit

  sca-test:
    uses: ./.github/workflows/ci-soos-sca.yml
    secrets:
      client_id: ${{ secrets.SOOS_CLIENT_ID }}
      api_key: ${{ secrets.SOOS_API_KEY }}

  sast-test:
    # needs: sca-test
    uses: ./.github/workflows/ci-sonarcloud-sast.yml
    secrets:
      GIT_HUB_TOKEN: ${{ secrets.GIT_HUB_TOKEN }} 
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build-compose:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Set up Docker Compose
      run: |
        docker-compose --version
        sudo rm /usr/local/bin/docker-compose
        curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
    - name: Build Image for Docker compose
      run: |
        docker-compose build app
      working-directory: ./app
    - name: Build and start Docker Compose
      run: |
        docker-compose up -d
      working-directory: ./app
    - name: Check if services are up
      run: |
        docker-compose ps
      working-directory: ./app
    - name: Stop Docker Compose
      run: |
        docker-compose down
      working-directory: ./app
      
  build-image:
    # needs: unit-test
    # uses: ./.github/workflows/ci-build-deploy.yml
    # with:
    #   docker_image: 'docker.io/airist/laracamp:${{ github.sha }}'
    # secrets:
    #   DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
    #   DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }} 

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Prepare
        id: prep
        run: |
          TAG=$(echo $GITHUB_SHA | head -c7)
          IMAGE="airist/nomadd"
          echo ::set-output name=tagged_image::${IMAGE}:${TAG}
          echo ::set-output name=tag::${TAG}
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master

      # Registry login step intentionally missing
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-single-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-single-buildx

      - name: Build production image
        uses: docker/build-push-action@v2
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile
          push: true # This would be set to true in a real world deployment scenario.
          tags: ${{ steps.prep.outputs.tagged_image }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.prep.outputs.tagged_image }}
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          
      - name: Check Docker Images 
        run: docker images 

  trivy-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Run Trivy vulnerability scanner in IaC mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scanners: 'config'
          hide-progress: false
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '0'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH,MEDIUM'
          trivy-config: trivy.yaml

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'